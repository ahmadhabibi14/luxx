// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createNewUser = `-- name: CreateNewUser :exec
INSERT INTO Users (
  user_id, username, full_name, email, password
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateNewUserParams struct {
	UserID   string `db:"user_id" json:"user_id"`
	Username string `db:"username" json:"username"`
	FullName string `db:"full_name" json:"full_name"`
	Email    string `db:"email" json:"email"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) error {
	_, err := q.db.ExecContext(ctx, createNewUser,
		arg.UserID,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Password,
	)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username FROM Users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	err := row.Scan(&username)
	return username, err
}

const getUserDataByUserId = `-- name: GetUserDataByUserId :one
SELECT username, full_name, email, avatar, join_at FROM Users
WHERE user_id = ?
`

type GetUserDataByUserIdRow struct {
	Username string         `db:"username" json:"username"`
	FullName string         `db:"full_name" json:"full_name"`
	Email    string         `db:"email" json:"email"`
	Avatar   sql.NullString `db:"avatar" json:"avatar"`
	JoinAt   time.Time      `db:"join_at" json:"join_at"`
}

func (q *Queries) GetUserDataByUserId(ctx context.Context, userID string) (GetUserDataByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserDataByUserId, userID)
	var i GetUserDataByUserIdRow
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Avatar,
		&i.JoinAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, full_name, email, avatar, join_at FROM Users
ORDER BY join_at DESC
`

type ListUsersRow struct {
	Username string         `db:"username" json:"username"`
	FullName string         `db:"full_name" json:"full_name"`
	Email    string         `db:"email" json:"email"`
	Avatar   sql.NullString `db:"avatar" json:"avatar"`
	JoinAt   time.Time      `db:"join_at" json:"join_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.Avatar,
			&i.JoinAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
